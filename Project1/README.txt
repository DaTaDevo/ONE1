----------------Об Обновлении                             
Последнее обновление принесло в себе то, что теперь есть только один файл DataStorage.                            
Так было сделано для удобства пользователей, потому что создание отдельного файла для отдельных              
контактов принесло бы плохие плоды , как минимум можно таким образом потерять данные в куче               
остальных файлов.
Также программа перешла на шаблон MVC.
------Version 2.1:
Теперь данные используются пользователем с помощью контейнера, а не с файлом.
Таким образом мы увеличили скорость чтение данных.
------Version 2.2:
Изменена документация
----------------Документация
Model.h : 
std::string name - имя контакта
std::string num  - номер контакта 
Model operator = (Model* m) - оператор равно , возвращает указатель на данный элемент
 Model(std::string s_name,std::string s_num) - конструктор, с помощью него можно указать сразу имя и номер контакта
void set(std::string s_name,std::string s_num) - функция сеттер, идентична предыдущей функции.
void setName(std::string s_name) - сеттер для имени контакта
void setNumber(std::string s_num) - сеттер для номера контакта
std::string getName() - геттер для имени контакта
std::string getNum() - геттер для номера контакта
Описание файла :
Данный файл хранит в себе класс Model который в свою очередь хранит данные для контакта. С помощью него(файла) вы можете устанавливать и получать значение переменный name и num.
View.h:
int answr - переменная для получение ответа с целочисленными данными. Пример: меню  
char c_answr - переменная для получение ответа где требуется ответ y - yes  и n - no
void print(std::string text) - функция для вывода текста. Примечание: не имеет перехода на следующую строку.
bool checkNumberInput(std::string number) - функция проверки введенного номера . Возвращает false если номер не соответствует лимиту (12 символов). True  если номер подошел под критерии.
void m_start() - функция отображающая меню (m_  - это префикс означающий что эта функция является частью меню)
int m_addContact(Model &contact)  - функция для отображения данных для создания нового контакта. возвращает 1 если произошли некоторые неполадки, 0 если не возникло никаких неполадок во время создание контакта.
std::string m_findContact() - функция для отображения данных для поиска контакта. возвращает искомое имя контакта.
void showContact(Model& mdl) - отображает контакт(Модель). переданную этой функции
void m_deleteContact(Model& deletedContact) - функция для отображение данных для удаление контакта.
Описание файла:
Файл хранит в себе класс View. Он же, класс, может отображать данные для пользователя, сохранять ответы полученные пользователем, и из-за того что answr и  c_answr находятся под ограничением public то другие функции могут использовать их (переменные) свободно без каких либо ограничений.
Controller.h:
View v - переменная класса View
Model m - переменная класса Model
std::vector <Model> storage - контейнер для хранения данных из файла DataStorage.txt
void fillStorage() - функция для заполнения контейнера storage,  может возвратить предупреждение если  storage пуст(не имеет данных).
void saveStorage() - сохраняет данные из контейнера storage.
void start() - функция для запуска “всего процесса” программы, запускает View::m_start и после обрабатывает ответ пользователя, запуская нужную функцию.
void find()  - функция ищет полученный от View::m_findContact(). Она отображает все данные подходящие под критерий поиска с помощью функции View::print().
void deleteContact() - функция обрабатывающая данные получаеые от View::m_deleteContact(). Она перезаписывает по критериям данные в storage.
void show() - функция показывающая все данные находящиеся в контейнере storage
Описание файла:
Данный файл хранит в себе класс Controller. Он (класс) позволяет обрабатывать данные получаемые от пользователя с помощью класса View.
Итог:
Это вся документация о программе PhoneBook (build 2.1)
Если нужны отдельные подробности пишите на
Telegram              : @datadevo
Gmail                             : denixden2818@gmail.com
 

