----------------Об Обновлении                             
Последнее обновление принесло в себе то, что теперь есть только один файл DataStorage.                            
Так было сделано для удобства пользователей, потому что создание отдельного файла для отдельных              
контактов принесло бы плохие плоды , как минимум можно таким образом потерять данные в куче               
остальных файлов.
Также программа перешла на шаблон MVC.
------Version 2.1:
Теперь данные используются пользователем с помощью контейнера, а не с файлом.
Таким образом мы увеличили скорость чтение данных.
------Version 2.2:
Изменена документация
------Version 2.5
Произошла небольшая адаптация классов Controller и View
Появление локальных консольных команд
Появился поиск с помощью номера
Были также обновлены  все классы.
Теперь возле новой функции будет символ “+” для быстрого поиска новых возможностей
----------------Документация
Model.h : 
std::string name - имя контакта
std::string num  - номер контакта 
Model operator = (Model* m) - оператор равно , возвращает указатель на данный элемент
Model(std::string s_name,std::string s_num) - конструктор, с помощью него можно указать сразу имя и номер контакта
void set(std::string s_name,std::string s_num) - функция сеттер, идентична предыдущей функции.
void setName(std::string s_name) - сеттер для имени контакта
void setNumber(std::string s_num) - сеттер для номера контакта
std::string getName() - геттер для имени контакта
std::string getNum() - геттер для номера контакта
+operator std::string() - оператор преобразования  из тип Model.h в std::string возвращает name + “\t” + num + “\n”
Описание файла :
Данный файл хранит в себе класс Model который в свою очередь хранит данные для контакта. С помощью него(файла) вы можете устанавливать и получать значение переменный name и num.
View.h:
+std::string answr = “ ” -  переменная замена прошлым двум, теперь с помощью нее можно получать и обрабатывать любой ответ.
+std::string direction = “View::Menu” - переменная получающая от функций меню куда дальше идти программе (так сказать получает направление), после обрабатывается в Controller::direct.  
void print(std::string text) - функция для вывода текста. Примечание: не имеет перехода на следующую строку.
+int checkInput(bool name = false) - почти полностью переработанная функция проверки. Теперь она проверяет весь ввод данных через переменную answr. Принимает параметр name булевого типа, это нужно чтобы проверка не проверяла те же параметры для имени. Это так же можно использовать и с обычными ответами к примеру ввода выбора меню, но для этого нужно указать что name true. Для проверки номера нужно оставить значение name стандартным. Можно даже сказать что это второе поколение функции checkNumberInput потому-что в приоритете пока проверка номера. а не имени. Возвращает 1 если что то произошло не так или данные соответствуют консольным командам.
void m_start() - функция отображающая меню (m_  - это префикс означающий что эта функция является частью меню)
int m_addContact(Model &contact)  - функция для отображения данных для создания нового контакта. возвращает 1 если произошли некоторые неполадки, 0 если не возникло никаких неполадок во время создание контакта.
std::string m_findContact() - функция для отображения данных для поиска контакта. возвращает искомое имя контакта.
void showContact(Model& mdl) - отображает контакт(Модель). переданную этой функции
void m_deleteContact(Model& deletedContact) - функция для отображение данных для удаление контакта.
+int commands() - функции проверки answr на консольные комманды (back and exit). Если ни одна из команд не подошла то возвращает 0 или 1 если одна из команд является answr.
Описание файла:
Файл хранит в себе класс View. Он же, класс, может отображать данные для пользователя, сохранять ответы полученные пользователем, из-за нахождение переменных answr и direction в public, можно свободно обрабатывать ответ пользователя. 
Controller.h:
View v - переменная класса View
Model m - переменная класса Model
std::vector <Model> storage - контейнер для хранения данных из файла DataStorage.txt
+Controller() - конструктор для заполнения контейнера storage,  может отобразить предупреждение если  storage пуст(не имеет данных).
+~Controller() - деструктор, сохраняет данные из контейнера storage.
+void direct()  - обрабатывает  переменную  View::direction. Запускает и функции View и Controller. Чтобы запустить программу именно ее нужно вызвать.
void find()  - функция ищет полученный от View::m_findContact(). Она отображает все данные подходящие под критерий поиска с помощью функции View::print().
void deleteContact() - функция обрабатывающая данные получаеые от View::m_deleteContact(). Она перезаписывает по критериям данные в storage.
void show() - функция показывающая все данные находящиеся в контейнере storage
Описание файла:
Данный файл хранит в себе класс Controller. Он (класс) позволяет обрабатывать данные получаемые от пользователя с помощью класса View.
Итог:
Это вся документация о программе PhoneBook (build 2.5)
Если нужны отдельные подробности пишите на
Telegram            	: @datadevo
Gmail           		: denixden2818@gmail.com
 



